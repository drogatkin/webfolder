<script>
    const user1 = '@user@'
    const pwd1 = '@^path@'
    var wskt
    var notifRecon = 0
      var maxReconn = 16 * 1000
      var ws_url
    const commandBuffer = []
    var cmdBufPos = -1
	function extra_actions(s, ctx) {
	    ws_url = 'ws'+s+'://'+location.hostname+':'+location.port+ctx+'/terminal/'+encodeURIComponent(pwd1.substring(1))
	    setup()
	}
	function setup() { 
	    wskt = new WebSocket(ws_url)
	    wskt.onopen = function(d) {
             notifRecon = 500
             
         }
         wskt.onmessage = function(e) {
            const lines = e.data.split(/\r?\n/g)
            const eolEnded = e.data.endsWith('\n')
            const cons = document.querySelector('#terminal')
            
            for(var i=0; i<lines.length -1; i++) {
               const newline = document.createElement("code")
			   newline.innerText = lines[i]
               cons.appendChild(newline)
	               const lnBreak = document.createElement("br")
            	   cons.appendChild(lnBreak)
            }
            if (lines[lines.length -1]) {
               const newline = document.createElement("code")
			   newline.innerText = lines[lines.length -1]
               cons.appendChild(newline)
            } else {
               const lnBreak = document.createElement("br")
               cons.appendChild(lnBreak)
       	   }
            cons.scrollIntoView({ behavior: "smooth", block: "end" })
         }
         wskt.onclose = function(e) {
            if (notifRecon == 0)
              notifRecon = 500
            if (notifRecon < maxReconn)
              notifRecon *= 2
            if (console && console.log)
	            console.log('Oops '+e + ' reconnecting in '+notifRecon+'ms')
            setTimeout(setup, notifRecon)
         }
	}
   function sendCommand(cmd) {
	   switch (event.key) {
	    case 'Enter':
	         if (wskt && wskt.readyState===WebSocket.OPEN && cmd.value)
		          wskt.send(cmd.value)
		      else
		         console.log('websocket closed')  
		      commandBuffer.push(cmd.value)  
		      cmd.value = ''
	        return
	    case 'ArrowUp':
	        if (commandBuffer.length) {
	           cmdBufPos--
	           if (cmdBufPos < 0)
	              cmdBufPos = commandBuffer.length-1
	        }
	        break
	    case 'ArrowDown':
	        if (commandBuffer.length) {
	           cmdBufPos++
	           if (cmdBufPos > commandBuffer.length-1)
	              cmdBufPos = 0 
	        }
	        break
	    default:
	       return
	  }
	  if (commandBuffer.length) {
	 	 cmd.value = commandBuffer[cmdBufPos]
	       const end = cmd.value.length
	       cmd.setSelectionRange(end, end)
			cmd.focus()
	  }
	  event.preventDefault()
   }
   
   function sendEnter() {
       if (wskt && wskt.readyState===WebSocket.OPEN) {
            const inpu = document.querySelector('input[type=text]')
            if (inpu && inpu.value)
                wskt.send(inpu.value)
		    wskt.send('\n')
		    if (inpu && inpu.value)
		          inpu.value = ''
		}
   }
   function sendCtrlZ() {
       if (wskt && wskt.readyState===WebSocket.OPEN) {
		   wskt.send('\u001A')
		   document.querySelector('input[type=text]').value=''
	   }
   }
   function sendCtrlC() {
       if (wskt && wskt.readyState===WebSocket.OPEN)
		          wskt.send('\x03')
   }
   function clearScreen() {
       const cons = document.querySelector('#terminal')
       cons.replaceChildren();
   }
   function removeAllChildNodes(parent) {
	    while (parent.firstChild) {
	        parent.removeChild(parent.firstChild);
	    }
   }
 </script>      

<h2>Console</h2>
<div style="position:fixed">
<input type="text" size="50" onkeydown="sendCommand(this)" autofocus> 
<button type="button" onclick="sendEnter()">^M</button> 
  <button type="button" onclick="sendCtrlC()">^C</button>  <button type="button" onclick="sendCtrlZ()">^Z</button> 
   <button type="button" onclick="clearScreen()">Clr</button>
</div>
<div id="terminal">
<code></code>
</div>