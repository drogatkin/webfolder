// Copyright 2009 Dmitriy Roatkin
package msn.javaarchitect.webfolder.ctrl;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.aldan3.util.Stream;
import org.aldan3.util.inet.HttpUtils;

import com.beegman.webbee.model.Appearance;

public class Downloadzip extends com.beegman.webbee.block.Stream {
	@Override
	protected void fillStream(OutputStream os) throws IOException {
		String range = req.getHeader("Range");
		if (range != null)
			throw new IOException("Range isn't supported");
		String[] selection = req.getParameterValues("files");
		File folder = new File(getConfigValue("TOPFOLDER", File.separator));
		if (selection == null) {
			resp.setContentType("text/plain; charset=UTF-8");
			os.write("Nothing selected, hit back.".getBytes(Folder.DEF_CHARSET));
			return;
		}
		// for(String el:selection)
		// log("downloading.."+el, null);
		File f = selection.length > 0 ? new File(folder, selection[0]) : null;
		String userAgent = req.getHeader("user-agent");
		if (selection.length == 1 && f.isFile()) {
			String name = f.getName();
			if (f.canRead() == false) {
				resp.setContentType("text/plain; charset=UTF-8");
				byte[] content = String.format("Can't read %s hit back.", name).getBytes(Folder.DEF_CHARSET);
				resp.setContentLength(content.length);
				os.write(content);
				return;
			}
			resp.setHeader("Content-Length", "" + f.length());
			if (appearance != Appearance.mobile || userAgent.indexOf("iPad") > 0) {
				resp.setContentType("application/octet-stream"); // since going
																	// // to
				// download
				if (userAgent.indexOf("MSIE") > 0)
					name = URLEncoder.encode(name, CharSet.UTF8).replace('+', ' ');
				if (name.length() > 77)
					name = HttpUtils.quoted_printableEncode(name, Folder.DEF_CHARSET);
				resp.setHeader("Content-disposition", "attachment; filename=\"" + name + '"');
			} else {
				// figure first if type is supported
				String ct = frontController.getServletContext().getMimeType(name);
				if (ct == null)
					ct = "text/plain";
				if (ct.startsWith("text/plain") || ct.startsWith("text/html") || ct.startsWith("image/")
						|| ct.startsWith("application/xml") || ct.startsWith("text/xml"))
					resp.setContentType(ct);
				else if (ct.startsWith("application/vnd.android.package-archive")) {
					resp.setContentType(ct);
					resp.setHeader("Content-disposition", "attachment; filename=\"" + name + '"');
				} else {
					resp.setContentType("text/plain; charset=UTF-8");
					byte[] content = String.format("This file type %s is not supported by the mobile platfrom.", ct)
							.getBytes(Folder.DEF_CHARSET);
					resp.setContentLength(content.length);
					os.write(content);
					return;
				}
			}
			// TODO add range operation
			Stream.copyFile(f, os);
			os.flush();
		} else { // multiple selection
			if (appearance != Appearance.mobile || userAgent.indexOf("iPad") > 0) {
				resp.setContentType("application/octet-stream");
				// resp.setContentType("application/x-zip-compressed");
				String zipFaliName = String.format("zipped-%d-on-%tF.zip", selection.length, System.currentTimeMillis());
				// TODO do entire value in one format
				resp.setHeader("Content-disposition", "attachment; filename=\""+zipFaliName+"\"");
			} else {
				resp.setContentType("text/plain; charset=UTF-8");
				os.write("You can't download multiple files in archive format to mobile device"
						.getBytes(Folder.DEF_CHARSET));
				return;
			}
			ZipOutputStream zs = new ZipOutputStream(os);
			zs.setLevel(ZipOutputStream.STORED);
			zs.setComment("Generated by WebFolder, Copyright (c) 2009, 2013 by Dmitriy Rogatkin");
			zipFiles(folder, selection, "", zs);
			zs.close();
		}
	}

	@Override
	protected String getConfigValue(String name, String defVal) {
		return Folder.getConfigValue(frontController, name, super.getConfigValue(name, defVal));
	}

	void zipFiles(File folder, String[] selection, String current, ZipOutputStream zs) throws IOException {
		for (String s : selection) {
			File f = new File(folder, s);
			if (f.isFile() && f.canRead()) {
				// ZipEntry e = new ZipEntry(new String((current +
				// f.getName()).getBytes(CharSet.UTF8), CharSet.ASCII));
				ZipEntry e = new ZipEntry(current + f.getName());
				// log("processing file %s", null, e);
				e.setTime(f.lastModified());
				zs.putNextEntry(e);
				Stream.copyFile(f, zs);
				zs.closeEntry();
			} else if (f.isDirectory()) {
				// log("processing directory %s", null, f);
				zipFiles(f, f.list(), current + f.getName() + '/', zs);
			}
		}
	}
}
